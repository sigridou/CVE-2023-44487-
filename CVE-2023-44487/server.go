package main

import (
	"log"
	"net"
	"net/http"
	"time"
)

func main() {
	srv := &http.Server{
		Addr:    ":8443",
		Handler: http.HandlerFunc(handle),
	}
	log.Printf("Serving on https://0.0.0.0:8443")

	// Handle potential errors when starting the server
	if err := srv.ListenAndServeTLS("certs/server.crt", "certs/server.key"); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}

func handle(w http.ResponseWriter, r *http.Request) {
	time.Sleep(5 * time.Second)

	// Get the non-loopback IP address
	ip, err := getNonLoopbackIP()
	if err != nil {
		log.Printf("Error getting non-loopback IP: %v", err)
		ip = "unknown"
	}

	response := "Hello! I'm the Go server running on machine " + ip

	w.Write([]byte(response))
}

func getNonLoopbackIP() (string, error) {
	interfaces, err := net.Interfaces()
	if err != nil {
		return "", err
	}

	for _, iface := range interfaces {
		addrs, err := iface.Addrs()
		if err != nil {
			return "", err
		}

		for _, addr := range addrs {
			ipnet, ok := addr.(*net.IPNet)
			if ok && !ipnet.IP.IsLoopback() && ipnet.IP.To4() != nil {
				ip := ipnet.IP.String()
				return ip, nil
			}
		}
	}

	return "", nil
}

